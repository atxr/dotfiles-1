#           ___
#      __ _|_  )_ _ ___ ___   personal page: https://amtoine.github.io/
#     / _` |/ /| ' \___(_-<   github   page: https://github.com/amtoine
#     \__,_/___|_||_|  /__/   my   dotfiles: https://github.com/amtoine/dotfiles
#               __         __         _    _      _
#        __    / /  ___   / /  ____ _| |_ | |____| |_ _ __
#      _/ _|  / /  (_-<  / /  (_-< \ / ' \| / / _` | '_/ _|
#     (_)__| /_/   /__/ /_/   /__/_\_\_||_|_\_\__,_|_| \__|
#
# Description:  WM-agnostic key-bindings.
# Dependencies: amtoine-scripts-git, lazygit, tig, archlinux-logout, rofi, dmenu,
#               passmenu and pass, dmscripts, emacs, dunst.
# License:      https://github.com/amtoine/dotfiles/blob/main/LICENSE 
# Contributors: Stevan Antoine

# general system control bindings.
# these do not require super as they are not really related to any
# window manager or workflow in particular.
XF86MonBrightness{Down,Up}
  amtoine-hdmi --main --brightness {-,+} --step 5 --notify
XF86MonBrightness{Down,Up} + control
  amtoine-hdmi --main --brightness {-,+} --step 1 --notify
shift + XF86MonBrightness{Down,Up}
  amtoine-hdmi --second --brightness {-,+} --step 5 --notify
shift + control + XF86MonBrightness{Down,Up}
  amtoine-hdmi --second --brightness {-,+} --step 1 --notify
XF86AudioMute
  amtoine-sound --toggle --channel Master --notify
ctrl + XF86AudioMute
  amtoine-sound --bluetooth --notify
XF86Audio{Lower,Raise}Volume + control
  amtoine-sound --{down,up} --channel Master --step 1 --notify
XF86Audio{Lower,Raise}Volume
  amtoine-sound --{down,up} --channel Master --step 5 --notify

# function bindings, such as taking screeshots, doing version control on the dotfiles,
# logging out of the window manager...
super + {_,shift} + F1
  flameshot {gui,launcher}
super + {_,shift} + F2
  amtoine-scrot {window,full} --notify
super + {_,shift} + F3
  TIGRC_USER="$XDG_CONFIG_HOME/tig/.dotfiles" GIT_DIR="$HOME/.dotfiles" GIT_WORK_TREE="$HOME" $WM_TERM $WM_TERM_FLAGS {tig --all, lazygit --git-dir="$HOME/.dotfiles" --work-tree="$HOME"}

# general one-key bindings, mainly to run applications quickly.
super + Return
  $WM_TERM 
super + {_,shift,alt} + @space
  rofi -show {drun,run,window}
super + p
  passmenu -l 10 -bw 5 -fn "Fira Code-20" 1> /tmp/passmenu.msg; \
  [ -s /tmp/passmenu.msg ] && { dunstify "$(cat /tmp/passmenu.msg)"; rm /tmp/passmenu.msg; }
super + Escape
  pkill -USR1 -x sxhkd
super + shift + q
  dm-logout -fn "Fira Code-20"

# dmenu-related bindings.
super + d; d
  dmenu_run -l 10 -bw 5 -c -fn "Fira Code-20"
super + d; h
  dm-hub -fn "Fira Code-20"

# Emacs-related bindings.
super + e; e
  emacsclient -c -a "emacs"
super + e; r
  choice=$(echo -e "no\nyes" | dmenu -c -l 2 -bw 5 -p "Restart Emacs?"); \
  [ ! "$choice" ] && exit 0; \
  [ "$choice" == "no" ] && exit 0; \
  dunstify 'Emacs' 'killing the server' --urgency critical --timeout 5000; \
  killall emacs; \
  /usr/bin/emacs --daemon; \
  dunstify 'Emacs' 'server restart successful'
super + e; h
  option=$(echo -e "org-agenda\nibuffer\ndired nil\nelfeed\nerc\nmu4e\neshell\n+vterm/here nil" | dmenu -c -l 10 -bw 5 -p "Choose an option to launch emacs with:"); \
  emacsclient -c -a "emacs" --eval "($option)"

# everything else that does not fit in any particular dedicated category.
super + z; b
  amtoine-battery --print
super + z; d; {c, h, p}
  dunstctl {close-all,history-pop,set-paused toggle}
super + z; g
  amtoine-gh-notify
super + z; m; {b,m,n,,p,q,r,s,h,j,k,l}
  mocp {-r,-G,-f,-G,-x,-t repeat,-t shuffle,-k -10,-f,-r,-k +10}
super + z; m; f
  amtoine-mocp --follow
super + z; n
  $WM_TERM $WM_TERM_FLAGS bash -c "nmcli d | grep -w 'connected' | sed 's/\s\+/ /g'| cut -d' ' -f4; echo -e '\n\n'; ping google.com"
super + z; p; {b,t}
  PICOM_EXTRA_FLAGS="--experimental-backends --animations" amtoine-pcm --{blur,toggle} --notify
super + z; p; d; f
  amtoine-pdf
super + z; r; t
  $WM_TERM $WM_TERM_FLAGS amtoine-themes --dmenu
super + z; r; w; {f,s}
  {feh --bg-fill --randomize /usr/share/backgrounds/* --no-fehbg,amtoine-wfzf --dmenu}
super + z; {s,t,w}
  amtoine-{sys-stats,time-date,weather-get}
super + z; u; {c, u}
  amtoine-update --{check,update}
super + z; z; {m, w}
  $WM_TERM $WM_TERM_FLAGS {amtoine-macho,amtoine-wtldr}
